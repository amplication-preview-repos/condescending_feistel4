/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ArchiveService } from "../archive.service";
import { ArchiveCreateInput } from "./ArchiveCreateInput";
import { Archive } from "./Archive";
import { ArchiveFindManyArgs } from "./ArchiveFindManyArgs";
import { ArchiveWhereUniqueInput } from "./ArchiveWhereUniqueInput";
import { ArchiveUpdateInput } from "./ArchiveUpdateInput";

export class ArchiveControllerBase {
  constructor(protected readonly service: ArchiveService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Archive })
  async createArchive(
    @common.Body() data: ArchiveCreateInput
  ): Promise<Archive> {
    return await this.service.createArchive({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Archive] })
  @ApiNestedQuery(ArchiveFindManyArgs)
  async archives(@common.Req() request: Request): Promise<Archive[]> {
    const args = plainToClass(ArchiveFindManyArgs, request.query);
    return this.service.archives({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Archive })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async archive(
    @common.Param() params: ArchiveWhereUniqueInput
  ): Promise<Archive | null> {
    const result = await this.service.archive({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Archive })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateArchive(
    @common.Param() params: ArchiveWhereUniqueInput,
    @common.Body() data: ArchiveUpdateInput
  ): Promise<Archive | null> {
    try {
      return await this.service.updateArchive({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Archive })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteArchive(
    @common.Param() params: ArchiveWhereUniqueInput
  ): Promise<Archive | null> {
    try {
      return await this.service.deleteArchive({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Archive as PrismaArchive } from "@prisma/client";

export class ArchiveServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ArchiveCountArgs, "select">): Promise<number> {
    return this.prisma.archive.count(args);
  }

  async archives<T extends Prisma.ArchiveFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchiveFindManyArgs>
  ): Promise<PrismaArchive[]> {
    return this.prisma.archive.findMany<Prisma.ArchiveFindManyArgs>(args);
  }
  async archive<T extends Prisma.ArchiveFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchiveFindUniqueArgs>
  ): Promise<PrismaArchive | null> {
    return this.prisma.archive.findUnique(args);
  }
  async createArchive<T extends Prisma.ArchiveCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchiveCreateArgs>
  ): Promise<PrismaArchive> {
    return this.prisma.archive.create<T>(args);
  }
  async updateArchive<T extends Prisma.ArchiveUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchiveUpdateArgs>
  ): Promise<PrismaArchive> {
    return this.prisma.archive.update<T>(args);
  }
  async deleteArchive<T extends Prisma.ArchiveDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchiveDeleteArgs>
  ): Promise<PrismaArchive> {
    return this.prisma.archive.delete(args);
  }
}

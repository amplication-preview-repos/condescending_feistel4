/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NewsletterSubscriber } from "./NewsletterSubscriber";
import { NewsletterSubscriberCountArgs } from "./NewsletterSubscriberCountArgs";
import { NewsletterSubscriberFindManyArgs } from "./NewsletterSubscriberFindManyArgs";
import { NewsletterSubscriberFindUniqueArgs } from "./NewsletterSubscriberFindUniqueArgs";
import { DeleteNewsletterSubscriberArgs } from "./DeleteNewsletterSubscriberArgs";
import { NewsletterSubscriberService } from "../newsletterSubscriber.service";
@graphql.Resolver(() => NewsletterSubscriber)
export class NewsletterSubscriberResolverBase {
  constructor(protected readonly service: NewsletterSubscriberService) {}

  async _newsletterSubscribersMeta(
    @graphql.Args() args: NewsletterSubscriberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NewsletterSubscriber])
  async newsletterSubscribers(
    @graphql.Args() args: NewsletterSubscriberFindManyArgs
  ): Promise<NewsletterSubscriber[]> {
    return this.service.newsletterSubscribers(args);
  }

  @graphql.Query(() => NewsletterSubscriber, { nullable: true })
  async newsletterSubscriber(
    @graphql.Args() args: NewsletterSubscriberFindUniqueArgs
  ): Promise<NewsletterSubscriber | null> {
    const result = await this.service.newsletterSubscriber(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NewsletterSubscriber)
  async deleteNewsletterSubscriber(
    @graphql.Args() args: DeleteNewsletterSubscriberArgs
  ): Promise<NewsletterSubscriber | null> {
    try {
      return await this.service.deleteNewsletterSubscriber(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  NewsletterSubscriber as PrismaNewsletterSubscriber,
} from "@prisma/client";

export class NewsletterSubscriberServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NewsletterSubscriberCountArgs, "select">
  ): Promise<number> {
    return this.prisma.newsletterSubscriber.count(args);
  }

  async newsletterSubscribers<
    T extends Prisma.NewsletterSubscriberFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.NewsletterSubscriberFindManyArgs>
  ): Promise<PrismaNewsletterSubscriber[]> {
    return this.prisma.newsletterSubscriber.findMany<Prisma.NewsletterSubscriberFindManyArgs>(
      args
    );
  }
  async newsletterSubscriber<
    T extends Prisma.NewsletterSubscriberFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.NewsletterSubscriberFindUniqueArgs>
  ): Promise<PrismaNewsletterSubscriber | null> {
    return this.prisma.newsletterSubscriber.findUnique(args);
  }
  async createNewsletterSubscriber<
    T extends Prisma.NewsletterSubscriberCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.NewsletterSubscriberCreateArgs>
  ): Promise<PrismaNewsletterSubscriber> {
    return this.prisma.newsletterSubscriber.create<T>(args);
  }
  async updateNewsletterSubscriber<
    T extends Prisma.NewsletterSubscriberUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.NewsletterSubscriberUpdateArgs>
  ): Promise<PrismaNewsletterSubscriber> {
    return this.prisma.newsletterSubscriber.update<T>(args);
  }
  async deleteNewsletterSubscriber<
    T extends Prisma.NewsletterSubscriberDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.NewsletterSubscriberDeleteArgs>
  ): Promise<PrismaNewsletterSubscriber> {
    return this.prisma.newsletterSubscriber.delete(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NewsletterSubscriberService } from "../newsletterSubscriber.service";
import { NewsletterSubscriberCreateInput } from "./NewsletterSubscriberCreateInput";
import { NewsletterSubscriber } from "./NewsletterSubscriber";
import { NewsletterSubscriberFindManyArgs } from "./NewsletterSubscriberFindManyArgs";
import { NewsletterSubscriberWhereUniqueInput } from "./NewsletterSubscriberWhereUniqueInput";
import { NewsletterSubscriberUpdateInput } from "./NewsletterSubscriberUpdateInput";

export class NewsletterSubscriberControllerBase {
  constructor(protected readonly service: NewsletterSubscriberService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NewsletterSubscriber })
  async createNewsletterSubscriber(
    @common.Body() data: NewsletterSubscriberCreateInput
  ): Promise<NewsletterSubscriber> {
    return await this.service.createNewsletterSubscriber({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NewsletterSubscriber] })
  @ApiNestedQuery(NewsletterSubscriberFindManyArgs)
  async newsletterSubscribers(
    @common.Req() request: Request
  ): Promise<NewsletterSubscriber[]> {
    const args = plainToClass(NewsletterSubscriberFindManyArgs, request.query);
    return this.service.newsletterSubscribers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NewsletterSubscriber })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async newsletterSubscriber(
    @common.Param() params: NewsletterSubscriberWhereUniqueInput
  ): Promise<NewsletterSubscriber | null> {
    const result = await this.service.newsletterSubscriber({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NewsletterSubscriber })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNewsletterSubscriber(
    @common.Param() params: NewsletterSubscriberWhereUniqueInput,
    @common.Body() data: NewsletterSubscriberUpdateInput
  ): Promise<NewsletterSubscriber | null> {
    try {
      return await this.service.updateNewsletterSubscriber({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NewsletterSubscriber })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNewsletterSubscriber(
    @common.Param() params: NewsletterSubscriberWhereUniqueInput
  ): Promise<NewsletterSubscriber | null> {
    try {
      return await this.service.deleteNewsletterSubscriber({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

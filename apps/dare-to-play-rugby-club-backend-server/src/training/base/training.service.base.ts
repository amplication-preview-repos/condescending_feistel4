/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Training as PrismaTraining } from "@prisma/client";

export class TrainingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TrainingCountArgs, "select">): Promise<number> {
    return this.prisma.training.count(args);
  }

  async trainings<T extends Prisma.TrainingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TrainingFindManyArgs>
  ): Promise<PrismaTraining[]> {
    return this.prisma.training.findMany<Prisma.TrainingFindManyArgs>(args);
  }
  async training<T extends Prisma.TrainingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TrainingFindUniqueArgs>
  ): Promise<PrismaTraining | null> {
    return this.prisma.training.findUnique(args);
  }
  async createTraining<T extends Prisma.TrainingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TrainingCreateArgs>
  ): Promise<PrismaTraining> {
    return this.prisma.training.create<T>(args);
  }
  async updateTraining<T extends Prisma.TrainingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TrainingUpdateArgs>
  ): Promise<PrismaTraining> {
    return this.prisma.training.update<T>(args);
  }
  async deleteTraining<T extends Prisma.TrainingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TrainingDeleteArgs>
  ): Promise<PrismaTraining> {
    return this.prisma.training.delete(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MerchandiseService } from "../merchandise.service";
import { MerchandiseCreateInput } from "./MerchandiseCreateInput";
import { Merchandise } from "./Merchandise";
import { MerchandiseFindManyArgs } from "./MerchandiseFindManyArgs";
import { MerchandiseWhereUniqueInput } from "./MerchandiseWhereUniqueInput";
import { MerchandiseUpdateInput } from "./MerchandiseUpdateInput";

export class MerchandiseControllerBase {
  constructor(protected readonly service: MerchandiseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Merchandise })
  async createMerchandise(
    @common.Body() data: MerchandiseCreateInput
  ): Promise<Merchandise> {
    return await this.service.createMerchandise({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Merchandise] })
  @ApiNestedQuery(MerchandiseFindManyArgs)
  async merchandises(@common.Req() request: Request): Promise<Merchandise[]> {
    const args = plainToClass(MerchandiseFindManyArgs, request.query);
    return this.service.merchandises({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Merchandise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async merchandise(
    @common.Param() params: MerchandiseWhereUniqueInput
  ): Promise<Merchandise | null> {
    const result = await this.service.merchandise({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Merchandise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMerchandise(
    @common.Param() params: MerchandiseWhereUniqueInput,
    @common.Body() data: MerchandiseUpdateInput
  ): Promise<Merchandise | null> {
    try {
      return await this.service.updateMerchandise({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Merchandise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMerchandise(
    @common.Param() params: MerchandiseWhereUniqueInput
  ): Promise<Merchandise | null> {
    try {
      return await this.service.deleteMerchandise({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

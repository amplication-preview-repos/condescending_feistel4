/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Merchandise as PrismaMerchandise } from "@prisma/client";

export class MerchandiseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MerchandiseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.merchandise.count(args);
  }

  async merchandises<T extends Prisma.MerchandiseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MerchandiseFindManyArgs>
  ): Promise<PrismaMerchandise[]> {
    return this.prisma.merchandise.findMany<Prisma.MerchandiseFindManyArgs>(
      args
    );
  }
  async merchandise<T extends Prisma.MerchandiseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MerchandiseFindUniqueArgs>
  ): Promise<PrismaMerchandise | null> {
    return this.prisma.merchandise.findUnique(args);
  }
  async createMerchandise<T extends Prisma.MerchandiseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MerchandiseCreateArgs>
  ): Promise<PrismaMerchandise> {
    return this.prisma.merchandise.create<T>(args);
  }
  async updateMerchandise<T extends Prisma.MerchandiseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MerchandiseUpdateArgs>
  ): Promise<PrismaMerchandise> {
    return this.prisma.merchandise.update<T>(args);
  }
  async deleteMerchandise<T extends Prisma.MerchandiseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MerchandiseDeleteArgs>
  ): Promise<PrismaMerchandise> {
    return this.prisma.merchandise.delete(args);
  }
}

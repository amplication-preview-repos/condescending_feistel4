/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Volunteer as PrismaVolunteer } from "@prisma/client";

export class VolunteerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VolunteerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.volunteer.count(args);
  }

  async volunteers<T extends Prisma.VolunteerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VolunteerFindManyArgs>
  ): Promise<PrismaVolunteer[]> {
    return this.prisma.volunteer.findMany<Prisma.VolunteerFindManyArgs>(args);
  }
  async volunteer<T extends Prisma.VolunteerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VolunteerFindUniqueArgs>
  ): Promise<PrismaVolunteer | null> {
    return this.prisma.volunteer.findUnique(args);
  }
  async createVolunteer<T extends Prisma.VolunteerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VolunteerCreateArgs>
  ): Promise<PrismaVolunteer> {
    return this.prisma.volunteer.create<T>(args);
  }
  async updateVolunteer<T extends Prisma.VolunteerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VolunteerUpdateArgs>
  ): Promise<PrismaVolunteer> {
    return this.prisma.volunteer.update<T>(args);
  }
  async deleteVolunteer<T extends Prisma.VolunteerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VolunteerDeleteArgs>
  ): Promise<PrismaVolunteer> {
    return this.prisma.volunteer.delete(args);
  }
}
